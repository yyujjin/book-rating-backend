name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Permission for Gradle
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Generate .env file
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}" > .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build . -t book-rating

      - name: Push Docker image to Docker Hub
        run: |
          docker tag book-rating ${{ secrets.DOCKER_USERNAME }}/book-rating:v2
          docker push ${{ secrets.DOCKER_USERNAME }}/book-rating:v2

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Get GitHub Actions Public IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Debug Public IP
        run: |
          echo "Public IP: ${{ steps.ip.outputs.ipv4 }}"

      - name: Set up SSH private key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'ap-northeast-2'

      - name: Add GitHub Actions IP to Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
              --group-id ${{ secrets.SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Test SSH Connection
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_HOST }} "echo 'SSH Connection Successful!'"



      - name: Pull Docker image from Docker Hub to EC2
        run: |
          ssh -i private_key.pem ubuntu@${{ secrets.EC2_HOST }} "sudo docker pull ${{ secrets.DOCKER_USERNAME }}/book-rating:v2"

      - name: Stop & Remove Existing Container
        run: |
          ssh -i private_key.pem ubuntu@${{ secrets.EC2_HOST }} "sudo docker stop bookrating_v2 || true && sudo docker rm bookrating_v2 || true"

      - name: Create Docker Network (if not exists)
        run: |
          ssh -i private_key.pem ubuntu@${{ secrets.EC2_HOST }} "sudo docker network inspect app-network || sudo docker network create app-network"

      - name: Run Docker Container on EC2
        run: |
          ssh -i private_key.pem ubuntu@${{ secrets.EC2_HOST }} "sudo docker run --cpus='.3' --name bookrating_v2 --network app-network -p 8080:8080 -e DB_URL='jdbc:mysql://bookdb:3306/bookrating?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true' -d ${{ secrets.DOCKER_USERNAME }}/book-rating:v2"

      - name: Remove GitHub Actions IP from Security Group
        run: |
          aws ec2 revoke-security-group-ingress \
              --group-id ${{ secrets.SECURITY_GROUP_ID }} \
              --protocol tcp \
              --port 22 \
              --cidr ${{ steps.ip.outputs.ipv4 }}/32